package com.example.acceptance.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.acceptance.greendao.bean.ApplyItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLY_ITEM_BEAN".
*/
public class ApplyItemBeanDao extends AbstractDao<ApplyItemBean, Long> {

    public static final String TABLENAME = "APPLY_ITEM_BEAN";

    /**
     * Properties of entity ApplyItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property DataPackageId = new Property(1, String.class, "dataPackageId", false, "DATA_PACKAGE_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ProductCodeName = new Property(3, String.class, "productCodeName", false, "PRODUCT_CODE_NAME");
        public final static Property ProductCode = new Property(4, String.class, "productCode", false, "PRODUCT_CODE");
        public final static Property ProductStatus = new Property(5, String.class, "productStatus", false, "PRODUCT_STATUS");
        public final static Property IsPureCheck = new Property(6, String.class, "isPureCheck", false, "IS_PURE_CHECK");
        public final static Property IsArmyCheck = new Property(7, String.class, "isArmyCheck", false, "IS_ARMY_CHECK");
        public final static Property IsCompleteChoice = new Property(8, String.class, "isCompleteChoice", false, "IS_COMPLETE_CHOICE");
        public final static Property IsCompleteRoutine = new Property(9, String.class, "isCompleteRoutine", false, "IS_COMPLETE_ROUTINE");
        public final static Property IsSatisfyRequire = new Property(10, String.class, "isSatisfyRequire", false, "IS_SATISFY_REQUIRE");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property ProductName = new Property(12, String.class, "productName", false, "PRODUCT_NAME");
    }


    public ApplyItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ApplyItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLY_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"DATA_PACKAGE_ID\" TEXT," + // 1: dataPackageId
                "\"ID\" TEXT," + // 2: id
                "\"PRODUCT_CODE_NAME\" TEXT," + // 3: productCodeName
                "\"PRODUCT_CODE\" TEXT," + // 4: productCode
                "\"PRODUCT_STATUS\" TEXT," + // 5: productStatus
                "\"IS_PURE_CHECK\" TEXT," + // 6: isPureCheck
                "\"IS_ARMY_CHECK\" TEXT," + // 7: isArmyCheck
                "\"IS_COMPLETE_CHOICE\" TEXT," + // 8: isCompleteChoice
                "\"IS_COMPLETE_ROUTINE\" TEXT," + // 9: isCompleteRoutine
                "\"IS_SATISFY_REQUIRE\" TEXT," + // 10: isSatisfyRequire
                "\"DESCRIPTION\" TEXT," + // 11: description
                "\"PRODUCT_NAME\" TEXT);"); // 12: productName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLY_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ApplyItemBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productCodeName = entity.getProductCodeName();
        if (productCodeName != null) {
            stmt.bindString(4, productCodeName);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(5, productCode);
        }
 
        String productStatus = entity.getProductStatus();
        if (productStatus != null) {
            stmt.bindString(6, productStatus);
        }
 
        String isPureCheck = entity.getIsPureCheck();
        if (isPureCheck != null) {
            stmt.bindString(7, isPureCheck);
        }
 
        String isArmyCheck = entity.getIsArmyCheck();
        if (isArmyCheck != null) {
            stmt.bindString(8, isArmyCheck);
        }
 
        String isCompleteChoice = entity.getIsCompleteChoice();
        if (isCompleteChoice != null) {
            stmt.bindString(9, isCompleteChoice);
        }
 
        String isCompleteRoutine = entity.getIsCompleteRoutine();
        if (isCompleteRoutine != null) {
            stmt.bindString(10, isCompleteRoutine);
        }
 
        String isSatisfyRequire = entity.getIsSatisfyRequire();
        if (isSatisfyRequire != null) {
            stmt.bindString(11, isSatisfyRequire);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(13, productName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ApplyItemBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productCodeName = entity.getProductCodeName();
        if (productCodeName != null) {
            stmt.bindString(4, productCodeName);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(5, productCode);
        }
 
        String productStatus = entity.getProductStatus();
        if (productStatus != null) {
            stmt.bindString(6, productStatus);
        }
 
        String isPureCheck = entity.getIsPureCheck();
        if (isPureCheck != null) {
            stmt.bindString(7, isPureCheck);
        }
 
        String isArmyCheck = entity.getIsArmyCheck();
        if (isArmyCheck != null) {
            stmt.bindString(8, isArmyCheck);
        }
 
        String isCompleteChoice = entity.getIsCompleteChoice();
        if (isCompleteChoice != null) {
            stmt.bindString(9, isCompleteChoice);
        }
 
        String isCompleteRoutine = entity.getIsCompleteRoutine();
        if (isCompleteRoutine != null) {
            stmt.bindString(10, isCompleteRoutine);
        }
 
        String isSatisfyRequire = entity.getIsSatisfyRequire();
        if (isSatisfyRequire != null) {
            stmt.bindString(11, isSatisfyRequire);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(13, productName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ApplyItemBean readEntity(Cursor cursor, int offset) {
        ApplyItemBean entity = new ApplyItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataPackageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productCodeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // productStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isPureCheck
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isArmyCheck
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isCompleteChoice
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isCompleteRoutine
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isSatisfyRequire
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // productName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ApplyItemBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataPackageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductCodeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsPureCheck(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsArmyCheck(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCompleteChoice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsCompleteRoutine(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsSatisfyRequire(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProductName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ApplyItemBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ApplyItemBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ApplyItemBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
