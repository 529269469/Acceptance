package com.example.acceptance.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.acceptance.greendao.bean.DataPackageDBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_PACKAGE_DBEAN".
*/
public class DataPackageDBeanDao extends AbstractDao<DataPackageDBean, Long> {

    public static final String TABLENAME = "DATA_PACKAGE_DBEAN";

    /**
     * Properties of entity DataPackageDBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property NamePackage = new Property(1, String.class, "namePackage", false, "NAME_PACKAGE");
        public final static Property UpLoadFile = new Property(2, String.class, "upLoadFile", false, "UP_LOAD_FILE");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Code = new Property(5, String.class, "code", false, "CODE");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property ResponseUnit = new Property(7, String.class, "responseUnit", false, "RESPONSE_UNIT");
        public final static Property ModelCode = new Property(8, String.class, "modelCode", false, "MODEL_CODE");
        public final static Property ProductName = new Property(9, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductCode = new Property(10, String.class, "productCode", false, "PRODUCT_CODE");
        public final static Property ProductType = new Property(11, String.class, "productType", false, "PRODUCT_TYPE");
        public final static Property Batch = new Property(12, String.class, "batch", false, "BATCH");
        public final static Property Creator = new Property(13, String.class, "creator", false, "CREATOR");
        public final static Property CreateTime = new Property(14, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ModelSeries = new Property(15, String.class, "modelSeries", false, "MODEL_SERIES");
        public final static Property ModelSeriesName = new Property(16, String.class, "modelSeriesName", false, "MODEL_SERIES_NAME");
        public final static Property PkgTemplateId = new Property(17, String.class, "pkgTemplateId", false, "PKG_TEMPLATE_ID");
        public final static Property LifecycleTemplateId = new Property(18, String.class, "lifecycleTemplateId", false, "LIFECYCLE_TEMPLATE_ID");
        public final static Property LifecycleStateId = new Property(19, String.class, "lifecycleStateId", false, "LIFECYCLE_STATE_ID");
    }


    public DataPackageDBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataPackageDBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_PACKAGE_DBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"NAME_PACKAGE\" TEXT," + // 1: namePackage
                "\"UP_LOAD_FILE\" TEXT," + // 2: upLoadFile
                "\"ID\" TEXT," + // 3: id
                "\"NAME\" TEXT," + // 4: name
                "\"CODE\" TEXT," + // 5: code
                "\"TYPE\" TEXT," + // 6: type
                "\"RESPONSE_UNIT\" TEXT," + // 7: responseUnit
                "\"MODEL_CODE\" TEXT," + // 8: modelCode
                "\"PRODUCT_NAME\" TEXT," + // 9: productName
                "\"PRODUCT_CODE\" TEXT," + // 10: productCode
                "\"PRODUCT_TYPE\" TEXT," + // 11: productType
                "\"BATCH\" TEXT," + // 12: batch
                "\"CREATOR\" TEXT," + // 13: creator
                "\"CREATE_TIME\" TEXT," + // 14: createTime
                "\"MODEL_SERIES\" TEXT," + // 15: modelSeries
                "\"MODEL_SERIES_NAME\" TEXT," + // 16: modelSeriesName
                "\"PKG_TEMPLATE_ID\" TEXT," + // 17: pkgTemplateId
                "\"LIFECYCLE_TEMPLATE_ID\" TEXT," + // 18: lifecycleTemplateId
                "\"LIFECYCLE_STATE_ID\" TEXT);"); // 19: lifecycleStateId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_PACKAGE_DBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataPackageDBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String namePackage = entity.getNamePackage();
        if (namePackage != null) {
            stmt.bindString(2, namePackage);
        }
 
        String upLoadFile = entity.getUpLoadFile();
        if (upLoadFile != null) {
            stmt.bindString(3, upLoadFile);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(6, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String responseUnit = entity.getResponseUnit();
        if (responseUnit != null) {
            stmt.bindString(8, responseUnit);
        }
 
        String modelCode = entity.getModelCode();
        if (modelCode != null) {
            stmt.bindString(9, modelCode);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(10, productName);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(11, productCode);
        }
 
        String productType = entity.getProductType();
        if (productType != null) {
            stmt.bindString(12, productType);
        }
 
        String batch = entity.getBatch();
        if (batch != null) {
            stmt.bindString(13, batch);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(14, creator);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
 
        String modelSeries = entity.getModelSeries();
        if (modelSeries != null) {
            stmt.bindString(16, modelSeries);
        }
 
        String modelSeriesName = entity.getModelSeriesName();
        if (modelSeriesName != null) {
            stmt.bindString(17, modelSeriesName);
        }
 
        String pkgTemplateId = entity.getPkgTemplateId();
        if (pkgTemplateId != null) {
            stmt.bindString(18, pkgTemplateId);
        }
 
        String lifecycleTemplateId = entity.getLifecycleTemplateId();
        if (lifecycleTemplateId != null) {
            stmt.bindString(19, lifecycleTemplateId);
        }
 
        String lifecycleStateId = entity.getLifecycleStateId();
        if (lifecycleStateId != null) {
            stmt.bindString(20, lifecycleStateId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataPackageDBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String namePackage = entity.getNamePackage();
        if (namePackage != null) {
            stmt.bindString(2, namePackage);
        }
 
        String upLoadFile = entity.getUpLoadFile();
        if (upLoadFile != null) {
            stmt.bindString(3, upLoadFile);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(6, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String responseUnit = entity.getResponseUnit();
        if (responseUnit != null) {
            stmt.bindString(8, responseUnit);
        }
 
        String modelCode = entity.getModelCode();
        if (modelCode != null) {
            stmt.bindString(9, modelCode);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(10, productName);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(11, productCode);
        }
 
        String productType = entity.getProductType();
        if (productType != null) {
            stmt.bindString(12, productType);
        }
 
        String batch = entity.getBatch();
        if (batch != null) {
            stmt.bindString(13, batch);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(14, creator);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
 
        String modelSeries = entity.getModelSeries();
        if (modelSeries != null) {
            stmt.bindString(16, modelSeries);
        }
 
        String modelSeriesName = entity.getModelSeriesName();
        if (modelSeriesName != null) {
            stmt.bindString(17, modelSeriesName);
        }
 
        String pkgTemplateId = entity.getPkgTemplateId();
        if (pkgTemplateId != null) {
            stmt.bindString(18, pkgTemplateId);
        }
 
        String lifecycleTemplateId = entity.getLifecycleTemplateId();
        if (lifecycleTemplateId != null) {
            stmt.bindString(19, lifecycleTemplateId);
        }
 
        String lifecycleStateId = entity.getLifecycleStateId();
        if (lifecycleStateId != null) {
            stmt.bindString(20, lifecycleStateId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataPackageDBean readEntity(Cursor cursor, int offset) {
        DataPackageDBean entity = new DataPackageDBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // namePackage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // upLoadFile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // responseUnit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // modelCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // productName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // productCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // productType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // batch
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // creator
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modelSeries
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modelSeriesName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pkgTemplateId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // lifecycleTemplateId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // lifecycleStateId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataPackageDBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNamePackage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpLoadFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResponseUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setModelCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProductName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProductCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProductType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBatch(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreator(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModelSeries(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModelSeriesName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPkgTemplateId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLifecycleTemplateId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLifecycleStateId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataPackageDBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataPackageDBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataPackageDBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
